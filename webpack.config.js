const path = require('path');
const webpack = require('webpack');
/**
 * This file has been autogenerated as it didn't exist or was made for an older incompatible version.
 * This file can be used for manual configuration will not be modified if the flowDefaults constant exists.
 */
const merge = require('webpack-merge');
const flowDefaults = require('./webpack.generated.js');
const WebpackRequireFixupPlugin = require('./plugins/WebpackRequireFixupPlugin');
flowDefaults.plugins.push(new webpack.LoaderOptionsPlugin({
  options: {
    ojL10nLoader: {
      locale: "en-US"
    }
  }
}));
flowDefaults.plugins.push(new webpack.ProvidePlugin({
  $: 'jquery',
  jQuery: 'jquery'
}));
flowDefaults.plugins.push(new WebpackRequireFixupPlugin(
    {
      ojModuleResources: {
        // The path to the root folder where the application-level (as opposed to relative) ojModule/<oj-module> views and viewModels are located
        root: path.join(__dirname, "./web/js/"),

        // view settings for ojModule and <oj-module>
        view: {
          prefix: 'text!',
          match: "^\\./views/.+\\.html$" // regular expression for locating all views under the root folder
        },
        // viewModel sttings for ojModule and <oj-module>
        viewModel: {
          match: "^\\./viewModels/.+\\.js$", // regular expression for locating all viewModels under the root folder
          addExtension: ".js" // Webpack search for lazy modules does not add '.js' extension automatically, so we need to specify it explicitly
        }
      },
      // Point this setting to the root folder for the associated JET distribution (could be a CDN). Used by the oj.Config.getResourceUri() call
      baseResourceUrl: "./node_modules/@oracle/oraclejet"
    }
));

module.exports = merge(flowDefaults, {
  resolveLoader: {
    // This adds ./loaders/ to the list of folders where Webpack is looking for loaders
    modules: ['node_modules', path.resolve(__dirname, './loaders')],
    alias: {
      ojL10n: "ojL10n-loader",
      text: "text-loader"
    }
  },
  resolve: {
    alias: {
      'ojs': path.resolve(__dirname, './node_modules/@oracle/oraclejet/dist/js/libs/oj/debug'),
      'ojtranslations': path.resolve(__dirname, './node_modules/@oracle/oraclejet/dist/js/libs/oj/resources'),
      'customElements': path.resolve(__dirname, './node_modules/@webcomponents/custom-elements/custom-elements.min'),
      'jquery': path.resolve(__dirname, './node_modules/jquery'),
      'jqueryui-amd': path.resolve(__dirname, './node_modules/jquery-ui/ui'),
      'promise': path.resolve(__dirname, './node_modules/es6-promise'),
    }
  }
});

/**
 * This file can be used to configure the flow plugin defaults.
 * <code>
 *   // Add a custom plugin
 *   flowDefaults.plugins.push(new MyPlugin());
 *
 *   // Update the rules to also transpile `.mjs` files
 *   if (!flowDefaults.module.rules[0].test) {
 *     throw "Unexpected structure in generated webpack config";
 *   }
 *   flowDefaults.module.rules[0].test = /\.m?js$/
 *
 *   // Include a custom JS in the entry point in addition to generated-flow-imports.js
 *   if (typeof flowDefaults.entry.index != "string") {
 *     throw "Unexpected structure in generated webpack config";
 *   }
 *   flowDefaults.entry.index = [flowDefaults.entry.index, "myCustomFile.js"];
 * </code>
 * or add new configuration in the merge block.
 * <code>
 *   module.exports = merge(flowDefaults, {
 *     mode: 'development',
 *     devtool: 'inline-source-map'
 *   });
 * </code>
 */
